[package]
name = "substrate-primitives"
version = "0.1.0"
authors = ["Parity Technologies <admin@parity.io>"]

[dependencies]
crunchy = "0.1"
substrate-runtime-std = { path = "../runtime-std", default_features = false }
substrate-codec = { path = "../codec", default_features = false }
elastic-array = "0.10"
# TODO: I think we can go back to `default_features = false` when we have a proper impl of `Hasher` to use
fixed-hash = { git = "https://github.com/paritytech/parity-common", features = ["heapsizeof"] }
rustc-hex = { version = "2.0", default_features = false }
serde = { version = "1.0", default_features = false }
serde_derive = { version = "1.0", optional = true }
# TODO: Used to fetch `uint` from "https://github.com/rphmeier/primitives.git" â€“ what was `compile-for-wasm` adding?
uint = { git = "https://github.com/paritytech/parity-common", default_features = false }
rlp = { git = "https://github.com/paritytech/parity-common" }
twox-hash = { version = "1.1.0", optional = true }
byteorder = { version = "1.1", default_features = false }
blake2-rfc = { version = "0.2.18", optional = true }
wasmi = { version = "0.4", optional = true }
hashdb = { git = "https://github.com/paritytech/parity-common" }
patricia-trie = { git = "https://github.com/paritytech/parity-common" }
plain_hasher = { git = "https://github.com/paritytech/parity-common" }

[dev-dependencies]
substrate-serializer = { path = "../serializer" }
pretty_assertions = "0.4"
heapsize = { version = "0.4"}

[features]
default = ["std"]
std = [
	"wasmi",
	"uint/std",
	"fixed-hash/std",
	"fixed-hash/heapsizeof",
	"substrate-codec/std",
	"substrate-runtime-std/std",
	"serde/std",
	"rustc-hex/std",
	"twox-hash",
	"blake2-rfc",
	"serde_derive",
	"byteorder/std"
]
